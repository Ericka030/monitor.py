
#Language use: Python
#No SSL was used for this code, the code primarily focuses on making plain HTTP requests.
#VS Code was used



import socket
import hashlib
import time
from urllib.parse import urlparse
import re

# Read URLs from a file
with open('urls-file.txt', 'r') as file:
    urls = file.readlines()

cleaned_urls = [url.strip() for url in urls]

# Function to establish a TCP connection
def establish_tcp_connection(url):
    try:
        parsed_url = urlparse(url)
        host = parsed_url.netloc
        if parsed_url.scheme == 'https':
            port = 443
        else:
            port = 80
        # Create a TCP socket
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((host, port))
        return client_socket
    except Exception as e:
        print(f"URL: {url}\nStatus: Network Error")
        return None

# Function to send an HTTP request message
def send_http_request(client_socket, path):
    try:
        request_message = f"GET {path} HTTP/1.1\r\nHost: {host}\r\n\r\n"
        client_socket.send(request_message.encode())
        return True
    except Exception as e:
        print(f"URL: {url}\nStatus: Network Error")
        return False

# Function to receive and analyze HTTP response
def analyze_http_response(client_socket):
    try:
        response = client_socket.recv(4096).decode()
        
        # Extract the status line from the response
        status_line = re.search(r'HTTP/1\.1 (\d{3} [A-Za-z ]+)', response)
        if status_line:
            status_code, status_text = status_line.group(0).split(' ', 1)
            print(f"URL: {url}\nStatus: {status_code} {status_text}")
            
            # Handle redirection (3XX)
            if status_code.startswith('3'):
                location_header = re.search(r'Location: (.+)', response)
                if location_header:
                    redirected_url = location_header.group(1).strip()
                    print(f"Redirected URL: {redirected_url}")
                    client_socket.close()
                    client_socket = establish_tcp_connection(redirected_url)
                    if client_socket:
                        send_http_request(client_socket, path)
                        return analyze_http_response(client_socket)
            
            # Handle referenced objects (images)
            if status_code.startswith('2'):
                images = re.findall(r'<img .*?src=["\'](https?://[^"\']+)["\'].*?>', response)
                for image_url in images:
                    print(f"Referenced URL: {image_url}")
                    image_socket = establish_tcp_connection(image_url)
                    if image_socket:
                        send_http_request(image_socket, '/')
                        image_status = analyze_http_response(image_socket)
                        image_socket.close()
                        print(f"Image Status: {image_status}")
        
        return None
    except Exception as e:
        return "Network Error"

# Function to monitor the website
def monitor(url):
    client_socket = establish_tcp_connection(url)
    if client_socket:
        parsed_url = urlparse(url)
        global host
        host = parsed_url.netloc
        global path
        path = parsed_url.path
        while True:
            if send_http_request(client_socket, path):
                analyze_http_response(client_socket)
            time.sleep(300)

if __name__ == "__main__":
    for url in cleaned_urls:
        monitor(url)
        print("Website content has changed!")


